Représentation graphique
    Question 11:
        On a ajouté comme tests :

Calcul du plus court chemin par point fixe
    Question 13:
        fonction pointFixe(G InOut:Graphe, depart:Noeud)
            debut
                pour chaque sommet v de G faire
                    v.distance <- infini
                    v.précédent <- indéfini
                fpour
                depart.distance <- 0

                cpt <- 0
                vtmp <- null
                tant que non egal(v, vtmp) et cpt<nbSommets faire
                    vtmp <- v.toString()
                    pour chaque sommet v de G faire
                        pour chaque arc (u, v) de G faire
                            tmp <- u.distance + poids(u, v)
                            si tmp < v.distance alors
                                v.distance <- tmp
                                v.précédent <- u
                            fsi
                        fpour
                        cpt <- cpt+1
                    fpour
                ftant
            fin

        LEXIQUE:
        G : Graphe, graphe orienté avec poids positive des arcs
        depart : Noeud, un sommet de G
        cpt : entier, nombre d'itérations
        nbSommets : entier, nombre de sommets du graphe G

    Question 15:
        Résultat de la méthode résoudre ....

Validation et experimentation
    Question 21:
        08 p:null
        Dijkstra:
        Iteration 0 :
        A ->  V:0.0 p:null
        B ->  V:1.7976931348623157E308 p:null
        C ->  V:1.7976931348623157E308 p:null
        D ->  V:1.7976931348623157E308 p:null
        E ->  V:1.7976931348623157E308 p:null
        F ->  V:1.7976931348623157E308 p:null
        G ->  V:1.7976931348623157E308 p:null

        Iteration 1 :
        A ->  V:0.0 p:null
        B ->  V:20.0 p:A
        C ->  V:1.7976931348623157E308 p:null
        D ->  V:3.0 p:A
        E ->  V:1.7976931348623157E308 p:null
        F ->  V:1.7976931348623157E308 p:null
        G ->  V:1.7976931348623157E3
        Iteration 2 :
        A ->  V:0.0 p:null
        B ->  V:20.0 p:A
        C ->  V:7.0 p:D
        D ->  V:3.0 p:A
        E ->  V:1.7976931348623157E308 p:null
        F ->  V:1.7976931348623157E308 p:null
        G ->  V:1.7976931348623157E308 p:null

        Iteration 3 :
        A ->  V:0.0 p:null
        B ->  V:9.0 p:C
        C ->  V:7.0 p:D
        D ->  V:3.0 p:A
        E ->  V:1.7976931348623157E308 p:null
        F ->  V:1.7976931348623157E308 p:null
        G ->  V:1.7976931348623157E308 p:null

        Iteration 4 :
        A ->  V:0.0 p:null
        B ->  V:9.0 p:C
        C ->  V:7.0 p:D
        D ->  V:3.0 p:A
        E ->  V:1.7976931348623157E308 p:null
        F ->  V:1.7976931348623157E308 p:null
        G ->  V:19.0 p:B

        Iteration 5 :
        A ->  V:0.0 p:null
        B ->  V:9.0 p:C
        C ->  V:7.0 p:D
        D ->  V:3.0 p:A
        E ->  V:1.7976931348623157E308 p:null
        F ->  V:24.0 p:G
        G ->  V:19.0 p:B

        Iteration 6 :
        A ->  V:0.0 p:null
        B ->  V:9.0 p:C
        C ->  V:7.0 p:D
        D ->  V:3.0 p:A
        E ->  V:27.0 p:F
        F ->  V:24.0 p:G
        G ->  V:19.0 p:B
        ----------------------
        Bellman Ford:
        Iteration 0 :
        A ->  V:0.0 p:null
        B ->  V:1.7976931348623157E308 p:null
        C ->  V:1.7976931348623157E308 p:null
        D ->  V:1.7976931348623157E308 p:null
        E ->  V:1.7976931348623157E308 p:null
        F ->  V:1.7976931348623157E308 p:null
        G ->  V:1.7976931348623157E308 p:null

        Iteration 1 :
        A ->  V:0.0 p:null
        B ->  V:9.0 p:C
        C ->  V:7.0 p:D
        D ->  V:3.0 p:A
        E ->  V:38.0 p:F
        F ->  V:35.0 p:G
        G ->  V:30.0 p:B

        Iteration 2 :
        A ->  V:0.0 p:null
        B ->  V:9.0 p:C
        C ->  V:7.0 p:D
        D ->  V:3.0 p:A
        E ->  V:27.0 p:F
        F ->  V:24.0 p:G
        G ->  V:19.0 p:B

        Iteration 3 :
        A ->  V:0.0 p:null
        B ->  V:9.0 p:C
        C ->  V:7.0 p:D
        D ->  V:3.0 p:A
        E ->  V:27.0 p:F
        F ->  V:24.0 p:G
        G ->  V:19.0 p:B

        Point fixe:
        Dijkstra : 6 itérations
        Bellman Ford : 3 itérations


        La méthode Dijkstra cherche le chemin minimum pour chaque sommet alors que la méthode Bellman-Ford regarde le cout minimum en additionnant les antécédants des
        sommets.


    Question 22:
        L'algorithme de Bellman Ford est plus rapide s'il y a moins


    Question 23:
        L'algorithme de Dijkstra semble plus efficace et plus rapide que l'algorithme de Bellman-Ford

    Question 24:
        Cho

    Question 25:
        Graphes.toGraphiz

    Question 26:
        Comparaison performances des algorithmes en fonction de la taille du graphhe

    Question 27:
        Le ratio de performance entre les deux algortihmes en fonction du nombre de noeuds.

    Question 28:
        On peut en conclure que ...

Extension : Intelligence Artificielle et labyrinthe
    Question 30:

    Question 31:
        Chemin le plus court :
